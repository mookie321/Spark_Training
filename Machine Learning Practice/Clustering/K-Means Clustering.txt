//K-means clusters the data points into a predefined number of cluster.
//KMeans is implemented as an Estimator and generates a KMeansModel as the base model

//********************///////
Input Columns
Param name		Type(s)		Default			Description
featuresCol		Vector		"features"		Feature vector

Output Columns
Param name		Type(s)				Default		Description
predictionCol	Int	"prediction"	Predicted 	cluster center
/////////************///////////


import org.apache.spark.ml.clustering.KMeans
import org.apache.spark.mllib.linalg.Vectors

// Creates a DataFrame
val dataset = sqlContext.createDataFrame(Seq(
  (1, Vectors.dense(0.0, 0.0, 0.0)),
  (2, Vectors.dense(0.1, 0.1, 0.1)),
  (3, Vectors.dense(0.2, 0.2, 0.2)),
  (4, Vectors.dense(9.0, 9.0, 9.0)),
  (5, Vectors.dense(9.1, 9.1, 9.1)),
  (6, Vectors.dense(9.2, 9.2, 9.2))
)).toDF("id", "features")

// Trains a k-means model
val kmeans = new KMeans()
  .setK(2)
  .setFeaturesCol("features")
  .setPredictionCol("prediction")
val model = kmeans.fit(dataset)

// Shows the result
println("Final Centers: ")
model.clusterCenters.foreach(println)